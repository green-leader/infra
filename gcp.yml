# The hosts line will manage all of google cloud except localhost which we don't
# need to manage
- name: Manage googlecloud
  hosts: googlecloud
  become: true
  tasks:
   - name: get service facts
     service_facts:

   - name: Copy dynamic DNS script to remote
     become: true
     copy:
       mode: 0500
       owner: root
       group: root
       force: no
       src: dyndns.sh
       dest: /usr/local/sbin
     when: ansible_facts.services["dyndns.service"] is not defined

   - name: Copy dynamic DNS systemd unit to remote
     become: true
     copy:
       mode: 0500
       owner: root
       group: root
       force: no
       src: dyndns.service
       dest: /etc/systemd/system
     when: ansible_facts.services["dyndns.service"] is not defined

   - name: Enable dyndns service
     become: true
     ansible.builtin.systemd:
      name: dyndns
      state: started
      enabled: yes

   - name: Only run "update_cache=yes" if the last one is more than 3600 seconds ago
     apt:
      update_cache: yes
      cache_valid_time: 3600

   - name: install wireguard and requirements
     apt:
       pkg:
        - "wireguard"
        - "linux-headers-{{ ansible_kernel }}"
       state: present

   - name: setup wireguard directory
     ansible.builtin.file:
       path: /etc/wireguard
       state: directory
       owner: root
       group: root
       mode: '0700'

   - name: check for wireguard keys
     ansible.builtin.stat:
       path: "{{ item.file }}"
     register: wg_keys
     loop:
       - { file: /etc/wireguard/privatekey }
       - { file: /etc/wireguard/publickey }

   - name: generate missing wireguard keys
     shell: set -o pipefail; wg genkey | tee privatekey | wg pubkey > publickey
     args:
       chdir: /etc/wireguard
       executable: /bin/bash
     when: not wg_keys.results.0.stat.exists and not wg_keys.results.1.stat.exists

   - name: get private key
     slurp:
       src: /etc/wireguard/privatekey
     register: wg_private

   - name: get public key
     slurp:
       src: /etc/wireguard/publickey
     register: wg_public

   - name: Print public key
     debug:
       var: wg_public

   - name: setup tunnel template with mobile client
     template:
       src: wireguard.conf.j2
       dest: /etc/wireguard/wg0.conf
       owner: root
       group: root
       mode: '0500'

   - name: Enable wg-quick@wg0 service
     ansible.builtin.systemd:
      name: wg-quick@wg0
      state: started
      enabled: yes

   # Set ip forwarding on in /proc and in the sysctl file and reload if necessary
   - name: Set ipv4 forwarding
     ansible.posix.sysctl:
       name: net.ipv4.ip_forward
       value: '1'
       sysctl_set: yes
       state: present
       reload: yes

   - name: iptables - flush filters
     ansible.builtin.iptables:
       chain: "{{ item }}"
       flush: yes
     with_items:  [ 'INPUT', 'FORWARD', 'OUTPUT' ]

   # -A FORWARD -i wg+ -j ACCEPT
   # -A FORWARD -o wg+ -j ACCEPT
   # -A FORWARD -j DROP
   # maybe: -A POSTROUTING -o eth0 -j MASQUERADE # set eth0 to outbound interface
   - name: iptables - accept traffic from wg interface only
     ansible.builtin.iptables:
       action: append
       chain: FORWARD
       in_interface: wg+
       jump: ACCEPT

   - name: iptables - send traffic from wg interface only
     ansible.builtin.iptables:
       action: append
       chain: FORWARD
       out_interface: wg+
       jump: ACCEPT

   - name: iptables - drop all other forwarded traffic
     ansible.builtin.iptables:
       action: append
       chain: FORWARD
       jump: DROP

   # iptables -I INPUT -p udp --dport 51820 -j LOG --log-prefix 'wireguard iptables: ' --log-level 7
   # iptables -I OUTPUT -p udp --sport 51820 -j LOG --log-prefix 'wireguard iptables: ' --log-level 7
   - name: iptables - log wireguard traffic 1/2
     ansible.builtin.iptables:
       action: insert
       chain: INPUT
       protocol: udp
       destination_port: "51820"
       jump: LOG
       log_prefix: "wireguard iptables: "
       log_level: debug

   - name: iptables - log wireguard traffic 2/2
     ansible.builtin.iptables:
       action: insert
       chain: OUTPUT
       protocol: udp
       source_port: "51820"
       jump: LOG
       log_prefix: "wireguard iptables: "
       log_level: debug

   - name: Set timezone to America/Denver
     timezone:
       name: America/Denver

  roles:
   - ansible-mailgun